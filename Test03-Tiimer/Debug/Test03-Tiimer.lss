
Test03-Tiimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000264  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  000002fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a6  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088c  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bc  00000000  00000000  000015fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000415  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000130  00000000  00000000  00001ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001fd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__vector_1>
   6:	00 00       	nop
   8:	95 c0       	rjmp	.+298    	; 0x134 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	99 c0       	rjmp	.+306    	; 0x174 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e6       	ldi	r30, 0x64	; 100
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b0 d0       	rcall	.+352    	; 0x224 <main>
  c4:	cd c0       	rjmp	.+410    	; 0x260 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TestBit>:
#include <avr/io.h>


int TestBit(char pin, char mask) // input의 경우는 해당하는 register를 value를 던져 주도록!
{
	if((pin & mask) != 0) return 1;//버튼 누르지 않았을 때 1반환
  c8:	86 23       	and	r24, r22
  ca:	19 f0       	breq	.+6      	; 0xd2 <TestBit+0xa>
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 95       	ret
	else return 0; // 버튼 눌렀을때 0반환
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
	//argument로 주고 받을 때는 주소 값으로 해줘야 한다.
}
  d6:	08 95       	ret

000000d8 <StandBy>:
//PINx PORTx -> 값을 대입

void StandBy()//PG4 pin으로 프로그램 시작 스위치 연결
{
	DDRG &= ~0x10;  //PG4 : 입력으로 설정
  d8:	e4 e6       	ldi	r30, 0x64	; 100
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8f 7e       	andi	r24, 0xEF	; 239
  e0:	80 83       	st	Z, r24
	PORTG |= 0x10; // PG4 : Pull-Up
  e2:	e5 e6       	ldi	r30, 0x65	; 101
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	80 83       	st	Z, r24
	//DDRG |= 0x10;  상위 1bit 출력
	//DDRG &= ~0x07;  하위 3개 bit 0으로 만들어서 입력 DDRG &=0xF8
	
	while(!TestBit(PING,0x10));//PING의 초기값이 1임을 가정
  ec:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
  f0:	60 e1       	ldi	r22, 0x10	; 16
  f2:	ea df       	rcall	.-44     	; 0xc8 <TestBit>
  f4:	89 2b       	or	r24, r25
  f6:	d1 f3       	breq	.-12     	; 0xec <StandBy+0x14>
	//프로그램이 안정화되기 전에 어느 값인지 모르고 프로그램은 이미 시작됨--> 아직 안정화되기 전에는 1이 아니라 0으로 인식, 입력되는 값이 안정화 되길 기다림
	//pull up 저항이므로 1이 될 때가지 기다림. 무한 루프를 돌아서 1이 되면 무한루프 탈출
	while (1)
	{
		if(!TestBit(PING,0x10)) break; //(1<<LED1) 0x10
  f8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
  fc:	60 e1       	ldi	r22, 0x10	; 16
  fe:	e4 df       	rcall	.-56     	; 0xc8 <TestBit>
 100:	89 2b       	or	r24, r25
 102:	d1 f7       	brne	.-12     	; 0xf8 <StandBy+0x20>
		//버튼이 눌러질 때 탈출
	}
	//PING 초기값이 1이되면 standby routine으로
	
 104:	08 95       	ret

00000106 <__vector_1>:
#include <avr/interrupt.h>//sei()함수에 대해 헤더파일 선언

int cnt =0, cnt1=0, cntEx=5 , st=0; //int main 내부에서 바뀌지 않았다

ISR(INT0_vect)//점점 느리게
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
	cntEx++;
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_2>:

ISR(INT1_vect)//점점 빠르게
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
	cntEx--;
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 146:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(cntEx<1)
 154:	18 16       	cp	r1, r24
 156:	19 06       	cpc	r1, r25
 158:	34 f0       	brlt	.+12     	; 0x166 <__vector_2+0x32>
	cntEx=1;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
}
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	0b b6       	in	r0, 0x3b	; 59
 180:	0f 92       	push	r0
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	cnt++;
 18e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <cnt>
 192:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <cnt+0x1>
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <cnt+0x1>
 19c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <cnt>
	if(cnt>=25 ) //(1/16M)*256*256*25 =0.102sec ==100ms
 1a0:	49 97       	sbiw	r24, 0x19	; 25
 1a2:	9c f1       	brlt	.+102    	; 0x20a <__vector_16+0x96>
	{	
		cnt=0;
 1a4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <cnt+0x1>
 1a8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <cnt>
		cnt1++;
 1ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cnt1>
 1b0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <cnt1+0x1>
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cnt1+0x1>
 1ba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cnt1>
		if(cnt1>= cntEx)
 1be:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c6:	82 17       	cp	r24, r18
 1c8:	93 07       	cpc	r25, r19
 1ca:	fc f0       	brlt	.+62     	; 0x20a <__vector_16+0x96>
		{
			cnt1=0;
 1cc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cnt1+0x1>
 1d0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <cnt1>
			if(st)
 1d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1dc:	89 2b       	or	r24, r25
 1de:	51 f0       	breq	.+20     	; 0x1f4 <__vector_16+0x80>
			{
				PORT &= ~_BV(LED);
 1e0:	e5 e6       	ldi	r30, 0x65	; 101
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	8d 7f       	andi	r24, 0xFD	; 253
 1e8:	80 83       	st	Z, r24
				st=0;
 1ea:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 1ee:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 1f2:	0b c0       	rjmp	.+22     	; 0x20a <__vector_16+0x96>
			}
		
			else
			{
				PORT |= _BV(LED);
 1f4:	e5 e6       	ldi	r30, 0x65	; 101
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	80 83       	st	Z, r24
				st=1;//불이 켜졌다는 status 선언
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 206:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			}
		}
	}
	
}
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0b be       	out	0x3b, r0	; 59
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <main>:


int main(void)
{
	DDRG |= _BV(LED); //LED Port 출력 설정
 224:	e4 e6       	ldi	r30, 0x64	; 100
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	80 83       	st	Z, r24
	PORT |= _BV(LED); //LED 키고
 22e:	c5 e6       	ldi	r28, 0x65	; 101
 230:	d0 e0       	ldi	r29, 0x00	; 0
 232:	88 81       	ld	r24, Y
 234:	82 60       	ori	r24, 0x02	; 2
 236:	88 83       	st	Y, r24
	StandBy();
 238:	4f df       	rcall	.-354    	; 0xd8 <StandBy>
    /* Replace with your application code */
	PORT &= ~_BV(LED); //LED 끔
 23a:	88 81       	ld	r24, Y
 23c:	8d 7f       	andi	r24, 0xFD	; 253
 23e:	88 83       	st	Y, r24
	//Timer interrupt
	TIMSK |= 0x01; //TOIE
 240:	87 b7       	in	r24, 0x37	; 55
 242:	81 60       	ori	r24, 0x01	; 1
 244:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= 0x06; //분주비 1024
 246:	83 b7       	in	r24, 0x33	; 51
 248:	86 60       	ori	r24, 0x06	; 6
 24a:	83 bf       	out	0x33, r24	; 51
	//TCCR 레지스터  분주비 설정
	
	EIMSK |=0x03;
 24c:	89 b7       	in	r24, 0x39	; 57
 24e:	83 60       	ori	r24, 0x03	; 3
 250:	89 bf       	out	0x39, r24	; 57
	EICRA |=0x0F;
 252:	ea e6       	ldi	r30, 0x6A	; 106
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	8f 60       	ori	r24, 0x0F	; 15
 25a:	80 83       	st	Z, r24
	////EIMSK |=0x03;
	//// Create Register : EICRA
		//
	//EICRA |= (1 << ISC01) | (1 << ISC00);
	//EICRA |= (1 << ISC11) | (1 << ISC10);
	sei();
 25c:	78 94       	sei
 25e:	ff cf       	rjmp	.-2      	; 0x25e <main+0x3a>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
