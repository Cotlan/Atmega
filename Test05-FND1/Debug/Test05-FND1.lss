
Test05-FND1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001f6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a32  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000911  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003da  00000000  00000000  0000166b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000439  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f9  00000000  00000000  00001ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001fe2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ef       	ldi	r30, 0xF6	; 246
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	9e c0       	rjmp	.+316    	; 0x1f2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
	//0123456789//3F 06 5B 4F 66 6D 7D 27 7F 67
	
//4자리 숫자를 10진수를 받아서, 2진 digit으로 변경한 후에 c출력
int in =7575;
int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	00 d0       	rcall	.+0      	; 0xbe <main+0x6>
  be:	00 d0       	rcall	.+0      	; 0xc0 <main+0x8>
  c0:	00 d0       	rcall	.+0      	; 0xc2 <main+0xa>
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	StandBy();
  c6:	57 d0       	rcall	.+174    	; 0x176 <StandBy>
	CDDR |= 0x0F;//  하위 4bit 출력으로 설정
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	8f 60       	ori	r24, 0x0F	; 15
  cc:	87 bb       	out	0x17, r24	; 23
	IDDR |= 0xFF;// 8bit 전체를 출력으로 설정
  ce:	8a b3       	in	r24, 0x1a	; 26
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a bb       	out	0x1a, r24	; 26
	
	
	CPORT = 0x0F; //모든 자리수 선택
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	88 bb       	out	0x18, r24	; 24
	IPORT = ~0xFF; //전체 세그먼트 ON [8.] 애노드여서 모든 값에 대해 bit not
  d8:	1b ba       	out	0x1b, r1	; 27
	
	}
	*/
	while(1)
	{
		for(int i=0; i<10000;i++)
  da:	00 e0       	ldi	r16, 0x00	; 0
  dc:	10 e0       	ldi	r17, 0x00	; 0
  de:	3d c0       	rjmp	.+122    	; 0x15a <main+0xa2>
		{
			data[0]=i/1000;
  e0:	c8 01       	movw	r24, r16
  e2:	68 ee       	ldi	r22, 0xE8	; 232
  e4:	73 e0       	ldi	r23, 0x03	; 3
  e6:	5e d0       	rcall	.+188    	; 0x1a4 <__divmodhi4>
  e8:	7a 83       	std	Y+2, r23	; 0x02
  ea:	69 83       	std	Y+1, r22	; 0x01
			data[1]=(i%1000)/100;
  ec:	24 e6       	ldi	r18, 0x64	; 100
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	b9 01       	movw	r22, r18
  f2:	58 d0       	rcall	.+176    	; 0x1a4 <__divmodhi4>
  f4:	7c 83       	std	Y+4, r23	; 0x04
  f6:	6b 83       	std	Y+3, r22	; 0x03
			data[2]=(i%100)/10;
  f8:	c8 01       	movw	r24, r16
  fa:	b9 01       	movw	r22, r18
  fc:	53 d0       	rcall	.+166    	; 0x1a4 <__divmodhi4>
  fe:	6a e0       	ldi	r22, 0x0A	; 10
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	50 d0       	rcall	.+160    	; 0x1a4 <__divmodhi4>
 104:	7e 83       	std	Y+6, r23	; 0x06
 106:	6d 83       	std	Y+5, r22	; 0x05
 108:	80 e0       	ldi	r24, 0x00	; 0
			data[3]=i%10;
			for (int j=0;j<4;j++)
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	21 c0       	rjmp	.+66     	; 0x150 <main+0x98>
 10e:	21 e0       	ldi	r18, 0x01	; 1
			{
				CPORT = _BV(j);// 1<<ibit set 하나의 bit만 1로 나머지는 모두 0으로
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	08 2e       	mov	r0, r24
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0x62>
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <main+0x5e>
 11e:	28 bb       	out	0x18, r18	; 24
 120:	fc 01       	movw	r30, r24
				//for(int j=0; j<10; j++)
				
				IPORT = ~img[data[j]];
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	2c 0f       	add	r18, r28
 12c:	3d 1f       	adc	r19, r29
 12e:	e2 0f       	add	r30, r18
 130:	f3 1f       	adc	r31, r19
 132:	01 90       	ld	r0, Z+
 134:	f0 81       	ld	r31, Z
 136:	e0 2d       	mov	r30, r0
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	20 81       	ld	r18, Z
 13e:	20 95       	com	r18
 140:	2b bb       	out	0x1b, r18	; 27
 142:	ef e1       	ldi	r30, 0x1F	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	fe e4       	ldi	r31, 0x4E	; 78
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0x8e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x94>
 14c:	00 00       	nop
 14e:	01 96       	adiw	r24, 0x01	; 1
		{
			data[0]=i/1000;
			data[1]=(i%1000)/100;
			data[2]=(i%100)/10;
			data[3]=i%10;
			for (int j=0;j<4;j++)
 150:	84 30       	cpi	r24, 0x04	; 4
 152:	91 05       	cpc	r25, r1
 154:	e4 f2       	brlt	.-72     	; 0x10e <main+0x56>
 156:	0f 5f       	subi	r16, 0xFF	; 255
	
	}
	*/
	while(1)
	{
		for(int i=0; i<10000;i++)
 158:	1f 4f       	sbci	r17, 0xFF	; 255
 15a:	00 31       	cpi	r16, 0x10	; 16
 15c:	f7 e2       	ldi	r31, 0x27	; 39
 15e:	1f 07       	cpc	r17, r31
 160:	0c f4       	brge	.+2      	; 0x164 <main+0xac>
 162:	be cf       	rjmp	.-132    	; 0xe0 <main+0x28>
 164:	ba cf       	rjmp	.-140    	; 0xda <main+0x22>

00000166 <TestBit>:
#include <avr/io.h>


int TestBit(char pin, char mask) // input의 경우는 해당하는 register를 value를 던져 주도록!
{
	if((pin & mask) != 0) return 1;//버튼 누르지 않았을 때 1반환
 166:	86 23       	and	r24, r22
 168:	19 f0       	breq	.+6      	; 0x170 <TestBit+0xa>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	08 95       	ret
	else return 0; // 버튼 눌렀을때 0반환
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
	//argument로 주고 받을 때는 주소 값으로 해줘야 한다.
}
 174:	08 95       	ret

00000176 <StandBy>:
//PINx PORTx -> 값을 대입

void StandBy()//PG4 pin으로 프로그램 시작 스위치 연결
{
	DDRG &= ~0x10;  //PG4 : 입력으로 설정
 176:	e4 e6       	ldi	r30, 0x64	; 100
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	8f 7e       	andi	r24, 0xEF	; 239
 17e:	80 83       	st	Z, r24
	PORTG |= 0x10; // PG4 : Pull-Up
 180:	e5 e6       	ldi	r30, 0x65	; 101
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 61       	ori	r24, 0x10	; 16
 188:	80 83       	st	Z, r24
	//DDRG |= 0x10;  상위 1bit 출력
	//DDRG &= ~0x07;  하위 3개 bit 0으로 만들어서 입력 DDRG &=0xF8
	
	while(!TestBit(PING,0x10));//PING의 초기값이 1임을 가정
 18a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 18e:	60 e1       	ldi	r22, 0x10	; 16
 190:	ea df       	rcall	.-44     	; 0x166 <TestBit>
 192:	89 2b       	or	r24, r25
 194:	d1 f3       	breq	.-12     	; 0x18a <StandBy+0x14>
	//프로그램이 안정화되기 전에 어느 값인지 모르고 프로그램은 이미 시작됨--> 아직 안정화되기 전에는 1이 아니라 0으로 인식, 입력되는 값이 안정화 되길 기다림
	//pull up 저항이므로 1이 될 때가지 기다림. 무한 루프를 돌아서 1이 되면 무한루프 탈출
	while (1)
	{
		if(!TestBit(PING,0x10)) break; //(1<<LED1) 0x10
 196:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 19a:	60 e1       	ldi	r22, 0x10	; 16
 19c:	e4 df       	rcall	.-56     	; 0x166 <TestBit>
 19e:	89 2b       	or	r24, r25
 1a0:	d1 f7       	brne	.-12     	; 0x196 <StandBy+0x20>
		//버튼이 눌러질 때 탈출
	}
	//PING 초기값이 1이되면 standby routine으로
	
 1a2:	08 95       	ret

000001a4 <__divmodhi4>:
 1a4:	97 fb       	bst	r25, 7
 1a6:	07 2e       	mov	r0, r23
 1a8:	16 f4       	brtc	.+4      	; 0x1ae <__divmodhi4+0xa>
 1aa:	00 94       	com	r0
 1ac:	06 d0       	rcall	.+12     	; 0x1ba <__divmodhi4_neg1>
 1ae:	77 fd       	sbrc	r23, 7
 1b0:	08 d0       	rcall	.+16     	; 0x1c2 <__divmodhi4_neg2>
 1b2:	0b d0       	rcall	.+22     	; 0x1ca <__udivmodhi4>
 1b4:	07 fc       	sbrc	r0, 7
 1b6:	05 d0       	rcall	.+10     	; 0x1c2 <__divmodhi4_neg2>
 1b8:	3e f4       	brtc	.+14     	; 0x1c8 <__divmodhi4_exit>

000001ba <__divmodhi4_neg1>:
 1ba:	90 95       	com	r25
 1bc:	81 95       	neg	r24
 1be:	9f 4f       	sbci	r25, 0xFF	; 255
 1c0:	08 95       	ret

000001c2 <__divmodhi4_neg2>:
 1c2:	70 95       	com	r23
 1c4:	61 95       	neg	r22
 1c6:	7f 4f       	sbci	r23, 0xFF	; 255

000001c8 <__divmodhi4_exit>:
 1c8:	08 95       	ret

000001ca <__udivmodhi4>:
 1ca:	aa 1b       	sub	r26, r26
 1cc:	bb 1b       	sub	r27, r27
 1ce:	51 e1       	ldi	r21, 0x11	; 17
 1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <__udivmodhi4_ep>

000001d2 <__udivmodhi4_loop>:
 1d2:	aa 1f       	adc	r26, r26
 1d4:	bb 1f       	adc	r27, r27
 1d6:	a6 17       	cp	r26, r22
 1d8:	b7 07       	cpc	r27, r23
 1da:	10 f0       	brcs	.+4      	; 0x1e0 <__udivmodhi4_ep>
 1dc:	a6 1b       	sub	r26, r22
 1de:	b7 0b       	sbc	r27, r23

000001e0 <__udivmodhi4_ep>:
 1e0:	88 1f       	adc	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	5a 95       	dec	r21
 1e6:	a9 f7       	brne	.-22     	; 0x1d2 <__udivmodhi4_loop>
 1e8:	80 95       	com	r24
 1ea:	90 95       	com	r25
 1ec:	bc 01       	movw	r22, r24
 1ee:	cd 01       	movw	r24, r26
 1f0:	08 95       	ret

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
