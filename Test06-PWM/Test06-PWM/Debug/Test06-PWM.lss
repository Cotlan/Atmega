
Test06-PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000005cc  00000640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0a  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000829  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f1  00000000  00000000  00001923  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000456  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e5  00000000  00000000  00002212  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000023f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	7a c0       	rjmp	.+244    	; 0xfe <__vector_2>
   a:	00 00       	nop
   c:	9c c0       	rjmp	.+312    	; 0x146 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	93 c0       	rjmp	.+294    	; 0x164 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ec       	ldi	r30, 0xCC	; 204
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5a d0       	rcall	.+180    	; 0x178 <main>
  c4:	81 c2       	rjmp	.+1282   	; 0x5c8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:
volatile int unsigned DutyRate = 50;

int led_y_st = 0;
int cnt =0,cnt_ref=1;
ISR(INT0_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	period -= 50;
  d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <period>
  da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <period+0x1>
  de:	c2 97       	sbiw	r24, 0x32	; 50
  e0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <period+0x1>
  e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <period>
	if(period<0) period = 500;
  e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <period>
  ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <period+0x1>
}
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_2>:

ISR(INT1_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	DutyRate += 10;
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 110:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 114:	0a 96       	adiw	r24, 0x0a	; 10
 116:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(DutyRate>90) DutyRate = 10;
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 126:	8b 35       	cpi	r24, 0x5B	; 91
 128:	91 05       	cpc	r25, r1
 12a:	30 f0       	brcs	.+12     	; 0x138 <__vector_2+0x3a>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <__vector_3>:

ISR(INT2_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
	//cnt_ref--;
	//if(cnt_ref<0) cnt_ref=50;
	OCR0+=10;
 152:	81 b7       	in	r24, 0x31	; 49
 154:	86 5f       	subi	r24, 0xF6	; 246
 156:	81 bf       	out	0x31, r24	; 49
}
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_15>:

 
ISR(TIMER0_COMP_vect)//HW PWM
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
	
	//toggle
	
	TCNT0=0;//OCR 값에 설정된 reference 에 도달할 때마다 reset
	*/
}
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <main>:

int main(void)
{
	EIMSK |= (1<<INT1)|(1<<INT0)|(1<<INT2);
 178:	89 b7       	in	r24, 0x39	; 57
 17a:	87 60       	ori	r24, 0x07	; 7
 17c:	89 bf       	out	0x39, r24	; 57
	EICRA |= 0x2A; //3개의 interrupt falling edge 적용 00101010
 17e:	ea e6       	ldi	r30, 0x6A	; 106
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	8a 62       	ori	r24, 0x2A	; 42
 186:	80 83       	st	Z, r24
	DDR |= (1<<LED_R)|(1<<LED_G)|(1<<LED_Y);
 188:	e4 e6       	ldi	r30, 0x64	; 100
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	83 61       	ori	r24, 0x13	; 19
 190:	80 83       	st	Z, r24
	
	//volume이 pwm 의 duty rate와 관련되어 있다
	//period는 음의 높낮이 led는 깜빡임 motor는 
	TIMSK |= (1<<OCIE0);
 192:	87 b7       	in	r24, 0x37	; 55
 194:	82 60       	ori	r24, 0x02	; 2
 196:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= 0x07; //(1<<CS00)|(1<<CS01)|(1<<CS02) 1024 64us
 198:	83 b7       	in	r24, 0x33	; 51
 19a:	87 60       	ori	r24, 0x07	; 7
 19c:	83 bf       	out	0x33, r24	; 51
	TCCR0 |=(1<<WGM01)|(1<<WGM00);// 11:고속 PWM 
 19e:	83 b7       	in	r24, 0x33	; 51
 1a0:	88 64       	ori	r24, 0x48	; 72
 1a2:	83 bf       	out	0x33, r24	; 51
	TCCR0 |=(1<<COM01);//10 normal mode 비반전 모드
 1a4:	83 b7       	in	r24, 0x33	; 51
 1a6:	80 62       	ori	r24, 0x20	; 32
 1a8:	83 bf       	out	0x33, r24	; 51
	OCR0 = 157;//TCNT 255보다 커질 수 없다. 10ms
 1aa:	8d e9       	ldi	r24, 0x9D	; 157
 1ac:	81 bf       	out	0x31, r24	; 49
	DDRB |=0x10;
 1ae:	87 b3       	in	r24, 0x17	; 23
 1b0:	80 61       	ori	r24, 0x10	; 16
 1b2:	87 bb       	out	0x17, r24	; 23
	sei();
 1b4:	78 94       	sei
	
	while (1)
	{
		PORT |= (1<<LED_R)|(1<<LED_G); _delay_ms(period*DutyRate/100); //T_H
 1b6:	e5 e6       	ldi	r30, 0x65	; 101
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	83 60       	ori	r24, 0x03	; 3
 1be:	80 83       	st	Z, r24
 1c0:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <period>
 1c4:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <period+0x1>
 1c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d0:	48 9f       	mul	r20, r24
 1d2:	90 01       	movw	r18, r0
 1d4:	49 9f       	mul	r20, r25
 1d6:	30 0d       	add	r19, r0
 1d8:	58 9f       	mul	r21, r24
 1da:	30 0d       	add	r19, r0
 1dc:	11 24       	eor	r1, r1
 1de:	36 95       	lsr	r19
 1e0:	27 95       	ror	r18
 1e2:	36 95       	lsr	r19
 1e4:	27 95       	ror	r18
 1e6:	ab e7       	ldi	r26, 0x7B	; 123
 1e8:	b4 e1       	ldi	r27, 0x14	; 20
 1ea:	df d1       	rcall	.+958    	; 0x5aa <__umulhisi3>
 1ec:	96 95       	lsr	r25
 1ee:	87 95       	ror	r24
 1f0:	bc 01       	movw	r22, r24
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	c0 d0       	rcall	.+384    	; 0x378 <__floatunsisf>
 1f8:	4b 01       	movw	r8, r22
 1fa:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	4a e7       	ldi	r20, 0x7A	; 122
 202:	55 e4       	ldi	r21, 0x45	; 69
 204:	47 d1       	rcall	.+654    	; 0x494 <__mulsf3>
 206:	6b 01       	movw	r12, r22
 208:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	40 e8       	ldi	r20, 0x80	; 128
 210:	5f e3       	ldi	r21, 0x3F	; 63
 212:	82 d0       	rcall	.+260    	; 0x318 <__cmpsf2>
 214:	88 23       	and	r24, r24
 216:	04 f1       	brlt	.+64     	; 0x258 <main+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	3f ef       	ldi	r19, 0xFF	; 255
 21c:	4f e7       	ldi	r20, 0x7F	; 127
 21e:	57 e4       	ldi	r21, 0x47	; 71
 220:	c7 01       	movw	r24, r14
 222:	b6 01       	movw	r22, r12
 224:	33 d1       	rcall	.+614    	; 0x48c <__gesf2>
 226:	18 16       	cp	r1, r24
 228:	9c f4       	brge	.+38     	; 0x250 <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 e2       	ldi	r20, 0x20	; 32
 230:	51 e4       	ldi	r21, 0x41	; 65
 232:	c5 01       	movw	r24, r10
 234:	b4 01       	movw	r22, r8
 236:	2e d1       	rcall	.+604    	; 0x494 <__mulsf3>
 238:	73 d0       	rcall	.+230    	; 0x320 <__fixunssfsi>
 23a:	06 c0       	rjmp	.+12     	; 0x248 <main+0xd0>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 23c:	80 e9       	ldi	r24, 0x90	; 144
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 244:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 246:	71 09       	sbc	r23, r1
 248:	61 15       	cp	r22, r1
 24a:	71 05       	cpc	r23, r1
 24c:	b9 f7       	brne	.-18     	; 0x23c <main+0xc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 24e:	09 c0       	rjmp	.+18     	; 0x262 <main+0xea>
 250:	c7 01       	movw	r24, r14
 252:	b6 01       	movw	r22, r12
 254:	65 d0       	rcall	.+202    	; 0x320 <__fixunssfsi>
 256:	02 c0       	rjmp	.+4      	; 0x25c <main+0xe4>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	cb 01       	movw	r24, r22
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <main+0xe6>
		PORT &= ~((1<<LED_R)|(1<<LED_G)); _delay_ms(period*(100-DutyRate)/100); //
 262:	e5 e6       	ldi	r30, 0x65	; 101
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	8c 7f       	andi	r24, 0xFC	; 252
 26a:	80 83       	st	Z, r24
 26c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 270:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 274:	84 e6       	ldi	r24, 0x64	; 100
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	82 1b       	sub	r24, r18
 27a:	93 0b       	sbc	r25, r19
 27c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <period>
 280:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <period+0x1>
 284:	84 9f       	mul	r24, r20
 286:	90 01       	movw	r18, r0
 288:	85 9f       	mul	r24, r21
 28a:	30 0d       	add	r19, r0
 28c:	94 9f       	mul	r25, r20
 28e:	30 0d       	add	r19, r0
 290:	11 24       	eor	r1, r1
 292:	36 95       	lsr	r19
 294:	27 95       	ror	r18
 296:	36 95       	lsr	r19
 298:	27 95       	ror	r18
 29a:	ab e7       	ldi	r26, 0x7B	; 123
 29c:	b4 e1       	ldi	r27, 0x14	; 20
 29e:	85 d1       	rcall	.+778    	; 0x5aa <__umulhisi3>
 2a0:	96 95       	lsr	r25
 2a2:	87 95       	ror	r24
 2a4:	bc 01       	movw	r22, r24
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	66 d0       	rcall	.+204    	; 0x378 <__floatunsisf>
 2ac:	4b 01       	movw	r8, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2ae:	5c 01       	movw	r10, r24
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	4a e7       	ldi	r20, 0x7A	; 122
 2b6:	55 e4       	ldi	r21, 0x45	; 69
 2b8:	ed d0       	rcall	.+474    	; 0x494 <__mulsf3>
 2ba:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
 2bc:	7c 01       	movw	r14, r24
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	40 e8       	ldi	r20, 0x80	; 128
 2c4:	5f e3       	ldi	r21, 0x3F	; 63
 2c6:	28 d0       	rcall	.+80     	; 0x318 <__cmpsf2>
 2c8:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 2ca:	04 f1       	brlt	.+64     	; 0x30c <main+0x194>
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	3f ef       	ldi	r19, 0xFF	; 255
 2d0:	4f e7       	ldi	r20, 0x7F	; 127
 2d2:	57 e4       	ldi	r21, 0x47	; 71
 2d4:	c7 01       	movw	r24, r14
 2d6:	b6 01       	movw	r22, r12
 2d8:	d9 d0       	rcall	.+434    	; 0x48c <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2da:	18 16       	cp	r1, r24
 2dc:	9c f4       	brge	.+38     	; 0x304 <main+0x18c>
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	40 e2       	ldi	r20, 0x20	; 32
 2e4:	51 e4       	ldi	r21, 0x41	; 65
 2e6:	c5 01       	movw	r24, r10
 2e8:	b4 01       	movw	r22, r8
 2ea:	d4 d0       	rcall	.+424    	; 0x494 <__mulsf3>
 2ec:	19 d0       	rcall	.+50     	; 0x320 <__fixunssfsi>
 2ee:	06 c0       	rjmp	.+12     	; 0x2fc <main+0x184>
 2f0:	80 e9       	ldi	r24, 0x90	; 144
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <main+0x17c>
 2f8:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2fa:	71 09       	sbc	r23, r1
 2fc:	61 15       	cp	r22, r1
 2fe:	71 05       	cpc	r23, r1
 300:	b9 f7       	brne	.-18     	; 0x2f0 <main+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 302:	59 cf       	rjmp	.-334    	; 0x1b6 <main+0x3e>
 304:	c7 01       	movw	r24, r14
 306:	b6 01       	movw	r22, r12
 308:	0b d0       	rcall	.+22     	; 0x320 <__fixunssfsi>
 30a:	02 c0       	rjmp	.+4      	; 0x310 <main+0x198>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	cb 01       	movw	r24, r22
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <main+0x19a>
 316:	4f cf       	rjmp	.-354    	; 0x1b6 <main+0x3e>

00000318 <__cmpsf2>:
 318:	6c d0       	rcall	.+216    	; 0x3f2 <__fp_cmp>
 31a:	08 f4       	brcc	.+2      	; 0x31e <__cmpsf2+0x6>
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	08 95       	ret

00000320 <__fixunssfsi>:
 320:	94 d0       	rcall	.+296    	; 0x44a <__fp_splitA>
 322:	88 f0       	brcs	.+34     	; 0x346 <__fixunssfsi+0x26>
 324:	9f 57       	subi	r25, 0x7F	; 127
 326:	90 f0       	brcs	.+36     	; 0x34c <__fixunssfsi+0x2c>
 328:	b9 2f       	mov	r27, r25
 32a:	99 27       	eor	r25, r25
 32c:	b7 51       	subi	r27, 0x17	; 23
 32e:	a0 f0       	brcs	.+40     	; 0x358 <__fixunssfsi+0x38>
 330:	d1 f0       	breq	.+52     	; 0x366 <__fixunssfsi+0x46>
 332:	66 0f       	add	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	88 1f       	adc	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	1a f0       	brmi	.+6      	; 0x342 <__fixunssfsi+0x22>
 33c:	ba 95       	dec	r27
 33e:	c9 f7       	brne	.-14     	; 0x332 <__fixunssfsi+0x12>
 340:	12 c0       	rjmp	.+36     	; 0x366 <__fixunssfsi+0x46>
 342:	b1 30       	cpi	r27, 0x01	; 1
 344:	81 f0       	breq	.+32     	; 0x366 <__fixunssfsi+0x46>
 346:	9b d0       	rcall	.+310    	; 0x47e <__fp_zero>
 348:	b1 e0       	ldi	r27, 0x01	; 1
 34a:	08 95       	ret
 34c:	98 c0       	rjmp	.+304    	; 0x47e <__fp_zero>
 34e:	67 2f       	mov	r22, r23
 350:	78 2f       	mov	r23, r24
 352:	88 27       	eor	r24, r24
 354:	b8 5f       	subi	r27, 0xF8	; 248
 356:	39 f0       	breq	.+14     	; 0x366 <__fixunssfsi+0x46>
 358:	b9 3f       	cpi	r27, 0xF9	; 249
 35a:	cc f3       	brlt	.-14     	; 0x34e <__fixunssfsi+0x2e>
 35c:	86 95       	lsr	r24
 35e:	77 95       	ror	r23
 360:	67 95       	ror	r22
 362:	b3 95       	inc	r27
 364:	d9 f7       	brne	.-10     	; 0x35c <__fixunssfsi+0x3c>
 366:	3e f4       	brtc	.+14     	; 0x376 <__fixunssfsi+0x56>
 368:	90 95       	com	r25
 36a:	80 95       	com	r24
 36c:	70 95       	com	r23
 36e:	61 95       	neg	r22
 370:	7f 4f       	sbci	r23, 0xFF	; 255
 372:	8f 4f       	sbci	r24, 0xFF	; 255
 374:	9f 4f       	sbci	r25, 0xFF	; 255
 376:	08 95       	ret

00000378 <__floatunsisf>:
 378:	e8 94       	clt
 37a:	09 c0       	rjmp	.+18     	; 0x38e <__floatsisf+0x12>

0000037c <__floatsisf>:
 37c:	97 fb       	bst	r25, 7
 37e:	3e f4       	brtc	.+14     	; 0x38e <__floatsisf+0x12>
 380:	90 95       	com	r25
 382:	80 95       	com	r24
 384:	70 95       	com	r23
 386:	61 95       	neg	r22
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	8f 4f       	sbci	r24, 0xFF	; 255
 38c:	9f 4f       	sbci	r25, 0xFF	; 255
 38e:	99 23       	and	r25, r25
 390:	a9 f0       	breq	.+42     	; 0x3bc <__floatsisf+0x40>
 392:	f9 2f       	mov	r31, r25
 394:	96 e9       	ldi	r25, 0x96	; 150
 396:	bb 27       	eor	r27, r27
 398:	93 95       	inc	r25
 39a:	f6 95       	lsr	r31
 39c:	87 95       	ror	r24
 39e:	77 95       	ror	r23
 3a0:	67 95       	ror	r22
 3a2:	b7 95       	ror	r27
 3a4:	f1 11       	cpse	r31, r1
 3a6:	f8 cf       	rjmp	.-16     	; 0x398 <__floatsisf+0x1c>
 3a8:	fa f4       	brpl	.+62     	; 0x3e8 <__floatsisf+0x6c>
 3aa:	bb 0f       	add	r27, r27
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <__floatsisf+0x36>
 3ae:	60 ff       	sbrs	r22, 0
 3b0:	1b c0       	rjmp	.+54     	; 0x3e8 <__floatsisf+0x6c>
 3b2:	6f 5f       	subi	r22, 0xFF	; 255
 3b4:	7f 4f       	sbci	r23, 0xFF	; 255
 3b6:	8f 4f       	sbci	r24, 0xFF	; 255
 3b8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ba:	16 c0       	rjmp	.+44     	; 0x3e8 <__floatsisf+0x6c>
 3bc:	88 23       	and	r24, r24
 3be:	11 f0       	breq	.+4      	; 0x3c4 <__floatsisf+0x48>
 3c0:	96 e9       	ldi	r25, 0x96	; 150
 3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <__floatsisf+0x6a>
 3c4:	77 23       	and	r23, r23
 3c6:	21 f0       	breq	.+8      	; 0x3d0 <__floatsisf+0x54>
 3c8:	9e e8       	ldi	r25, 0x8E	; 142
 3ca:	87 2f       	mov	r24, r23
 3cc:	76 2f       	mov	r23, r22
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <__floatsisf+0x5e>
 3d0:	66 23       	and	r22, r22
 3d2:	71 f0       	breq	.+28     	; 0x3f0 <__floatsisf+0x74>
 3d4:	96 e8       	ldi	r25, 0x86	; 134
 3d6:	86 2f       	mov	r24, r22
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	2a f0       	brmi	.+10     	; 0x3e8 <__floatsisf+0x6c>
 3de:	9a 95       	dec	r25
 3e0:	66 0f       	add	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	88 1f       	adc	r24, r24
 3e6:	da f7       	brpl	.-10     	; 0x3de <__floatsisf+0x62>
 3e8:	88 0f       	add	r24, r24
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	97 f9       	bld	r25, 7
 3f0:	08 95       	ret

000003f2 <__fp_cmp>:
 3f2:	99 0f       	add	r25, r25
 3f4:	00 08       	sbc	r0, r0
 3f6:	55 0f       	add	r21, r21
 3f8:	aa 0b       	sbc	r26, r26
 3fa:	e0 e8       	ldi	r30, 0x80	; 128
 3fc:	fe ef       	ldi	r31, 0xFE	; 254
 3fe:	16 16       	cp	r1, r22
 400:	17 06       	cpc	r1, r23
 402:	e8 07       	cpc	r30, r24
 404:	f9 07       	cpc	r31, r25
 406:	c0 f0       	brcs	.+48     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 408:	12 16       	cp	r1, r18
 40a:	13 06       	cpc	r1, r19
 40c:	e4 07       	cpc	r30, r20
 40e:	f5 07       	cpc	r31, r21
 410:	98 f0       	brcs	.+38     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 412:	62 1b       	sub	r22, r18
 414:	73 0b       	sbc	r23, r19
 416:	84 0b       	sbc	r24, r20
 418:	95 0b       	sbc	r25, r21
 41a:	39 f4       	brne	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41c:	0a 26       	eor	r0, r26
 41e:	61 f0       	breq	.+24     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 420:	23 2b       	or	r18, r19
 422:	24 2b       	or	r18, r20
 424:	25 2b       	or	r18, r21
 426:	21 f4       	brne	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 428:	08 95       	ret
 42a:	0a 26       	eor	r0, r26
 42c:	09 f4       	brne	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	a1 40       	sbci	r26, 0x01	; 1
 430:	a6 95       	lsr	r26
 432:	8f ef       	ldi	r24, 0xFF	; 255
 434:	81 1d       	adc	r24, r1
 436:	81 1d       	adc	r24, r1
 438:	08 95       	ret

0000043a <__fp_split3>:
 43a:	57 fd       	sbrc	r21, 7
 43c:	90 58       	subi	r25, 0x80	; 128
 43e:	44 0f       	add	r20, r20
 440:	55 1f       	adc	r21, r21
 442:	59 f0       	breq	.+22     	; 0x45a <__fp_splitA+0x10>
 444:	5f 3f       	cpi	r21, 0xFF	; 255
 446:	71 f0       	breq	.+28     	; 0x464 <__fp_splitA+0x1a>
 448:	47 95       	ror	r20

0000044a <__fp_splitA>:
 44a:	88 0f       	add	r24, r24
 44c:	97 fb       	bst	r25, 7
 44e:	99 1f       	adc	r25, r25
 450:	61 f0       	breq	.+24     	; 0x46a <__fp_splitA+0x20>
 452:	9f 3f       	cpi	r25, 0xFF	; 255
 454:	79 f0       	breq	.+30     	; 0x474 <__fp_splitA+0x2a>
 456:	87 95       	ror	r24
 458:	08 95       	ret
 45a:	12 16       	cp	r1, r18
 45c:	13 06       	cpc	r1, r19
 45e:	14 06       	cpc	r1, r20
 460:	55 1f       	adc	r21, r21
 462:	f2 cf       	rjmp	.-28     	; 0x448 <__fp_split3+0xe>
 464:	46 95       	lsr	r20
 466:	f1 df       	rcall	.-30     	; 0x44a <__fp_splitA>
 468:	08 c0       	rjmp	.+16     	; 0x47a <__fp_splitA+0x30>
 46a:	16 16       	cp	r1, r22
 46c:	17 06       	cpc	r1, r23
 46e:	18 06       	cpc	r1, r24
 470:	99 1f       	adc	r25, r25
 472:	f1 cf       	rjmp	.-30     	; 0x456 <__fp_splitA+0xc>
 474:	86 95       	lsr	r24
 476:	71 05       	cpc	r23, r1
 478:	61 05       	cpc	r22, r1
 47a:	08 94       	sec
 47c:	08 95       	ret

0000047e <__fp_zero>:
 47e:	e8 94       	clt

00000480 <__fp_szero>:
 480:	bb 27       	eor	r27, r27
 482:	66 27       	eor	r22, r22
 484:	77 27       	eor	r23, r23
 486:	cb 01       	movw	r24, r22
 488:	97 f9       	bld	r25, 7
 48a:	08 95       	ret

0000048c <__gesf2>:
 48c:	b2 df       	rcall	.-156    	; 0x3f2 <__fp_cmp>
 48e:	08 f4       	brcc	.+2      	; 0x492 <__gesf2+0x6>
 490:	8f ef       	ldi	r24, 0xFF	; 255
 492:	08 95       	ret

00000494 <__mulsf3>:
 494:	0b d0       	rcall	.+22     	; 0x4ac <__mulsf3x>
 496:	78 c0       	rjmp	.+240    	; 0x588 <__fp_round>
 498:	69 d0       	rcall	.+210    	; 0x56c <__fp_pscA>
 49a:	28 f0       	brcs	.+10     	; 0x4a6 <__mulsf3+0x12>
 49c:	6e d0       	rcall	.+220    	; 0x57a <__fp_pscB>
 49e:	18 f0       	brcs	.+6      	; 0x4a6 <__mulsf3+0x12>
 4a0:	95 23       	and	r25, r21
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <__mulsf3+0x12>
 4a4:	5a c0       	rjmp	.+180    	; 0x55a <__fp_inf>
 4a6:	5f c0       	rjmp	.+190    	; 0x566 <__fp_nan>
 4a8:	11 24       	eor	r1, r1
 4aa:	ea cf       	rjmp	.-44     	; 0x480 <__fp_szero>

000004ac <__mulsf3x>:
 4ac:	c6 df       	rcall	.-116    	; 0x43a <__fp_split3>
 4ae:	a0 f3       	brcs	.-24     	; 0x498 <__mulsf3+0x4>

000004b0 <__mulsf3_pse>:
 4b0:	95 9f       	mul	r25, r21
 4b2:	d1 f3       	breq	.-12     	; 0x4a8 <__mulsf3+0x14>
 4b4:	95 0f       	add	r25, r21
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	55 1f       	adc	r21, r21
 4ba:	62 9f       	mul	r22, r18
 4bc:	f0 01       	movw	r30, r0
 4be:	72 9f       	mul	r23, r18
 4c0:	bb 27       	eor	r27, r27
 4c2:	f0 0d       	add	r31, r0
 4c4:	b1 1d       	adc	r27, r1
 4c6:	63 9f       	mul	r22, r19
 4c8:	aa 27       	eor	r26, r26
 4ca:	f0 0d       	add	r31, r0
 4cc:	b1 1d       	adc	r27, r1
 4ce:	aa 1f       	adc	r26, r26
 4d0:	64 9f       	mul	r22, r20
 4d2:	66 27       	eor	r22, r22
 4d4:	b0 0d       	add	r27, r0
 4d6:	a1 1d       	adc	r26, r1
 4d8:	66 1f       	adc	r22, r22
 4da:	82 9f       	mul	r24, r18
 4dc:	22 27       	eor	r18, r18
 4de:	b0 0d       	add	r27, r0
 4e0:	a1 1d       	adc	r26, r1
 4e2:	62 1f       	adc	r22, r18
 4e4:	73 9f       	mul	r23, r19
 4e6:	b0 0d       	add	r27, r0
 4e8:	a1 1d       	adc	r26, r1
 4ea:	62 1f       	adc	r22, r18
 4ec:	83 9f       	mul	r24, r19
 4ee:	a0 0d       	add	r26, r0
 4f0:	61 1d       	adc	r22, r1
 4f2:	22 1f       	adc	r18, r18
 4f4:	74 9f       	mul	r23, r20
 4f6:	33 27       	eor	r19, r19
 4f8:	a0 0d       	add	r26, r0
 4fa:	61 1d       	adc	r22, r1
 4fc:	23 1f       	adc	r18, r19
 4fe:	84 9f       	mul	r24, r20
 500:	60 0d       	add	r22, r0
 502:	21 1d       	adc	r18, r1
 504:	82 2f       	mov	r24, r18
 506:	76 2f       	mov	r23, r22
 508:	6a 2f       	mov	r22, r26
 50a:	11 24       	eor	r1, r1
 50c:	9f 57       	subi	r25, 0x7F	; 127
 50e:	50 40       	sbci	r21, 0x00	; 0
 510:	8a f0       	brmi	.+34     	; 0x534 <__mulsf3_pse+0x84>
 512:	e1 f0       	breq	.+56     	; 0x54c <__mulsf3_pse+0x9c>
 514:	88 23       	and	r24, r24
 516:	4a f0       	brmi	.+18     	; 0x52a <__mulsf3_pse+0x7a>
 518:	ee 0f       	add	r30, r30
 51a:	ff 1f       	adc	r31, r31
 51c:	bb 1f       	adc	r27, r27
 51e:	66 1f       	adc	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	88 1f       	adc	r24, r24
 524:	91 50       	subi	r25, 0x01	; 1
 526:	50 40       	sbci	r21, 0x00	; 0
 528:	a9 f7       	brne	.-22     	; 0x514 <__mulsf3_pse+0x64>
 52a:	9e 3f       	cpi	r25, 0xFE	; 254
 52c:	51 05       	cpc	r21, r1
 52e:	70 f0       	brcs	.+28     	; 0x54c <__mulsf3_pse+0x9c>
 530:	14 c0       	rjmp	.+40     	; 0x55a <__fp_inf>
 532:	a6 cf       	rjmp	.-180    	; 0x480 <__fp_szero>
 534:	5f 3f       	cpi	r21, 0xFF	; 255
 536:	ec f3       	brlt	.-6      	; 0x532 <__mulsf3_pse+0x82>
 538:	98 3e       	cpi	r25, 0xE8	; 232
 53a:	dc f3       	brlt	.-10     	; 0x532 <__mulsf3_pse+0x82>
 53c:	86 95       	lsr	r24
 53e:	77 95       	ror	r23
 540:	67 95       	ror	r22
 542:	b7 95       	ror	r27
 544:	f7 95       	ror	r31
 546:	e7 95       	ror	r30
 548:	9f 5f       	subi	r25, 0xFF	; 255
 54a:	c1 f7       	brne	.-16     	; 0x53c <__mulsf3_pse+0x8c>
 54c:	fe 2b       	or	r31, r30
 54e:	88 0f       	add	r24, r24
 550:	91 1d       	adc	r25, r1
 552:	96 95       	lsr	r25
 554:	87 95       	ror	r24
 556:	97 f9       	bld	r25, 7
 558:	08 95       	ret

0000055a <__fp_inf>:
 55a:	97 f9       	bld	r25, 7
 55c:	9f 67       	ori	r25, 0x7F	; 127
 55e:	80 e8       	ldi	r24, 0x80	; 128
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	08 95       	ret

00000566 <__fp_nan>:
 566:	9f ef       	ldi	r25, 0xFF	; 255
 568:	80 ec       	ldi	r24, 0xC0	; 192
 56a:	08 95       	ret

0000056c <__fp_pscA>:
 56c:	00 24       	eor	r0, r0
 56e:	0a 94       	dec	r0
 570:	16 16       	cp	r1, r22
 572:	17 06       	cpc	r1, r23
 574:	18 06       	cpc	r1, r24
 576:	09 06       	cpc	r0, r25
 578:	08 95       	ret

0000057a <__fp_pscB>:
 57a:	00 24       	eor	r0, r0
 57c:	0a 94       	dec	r0
 57e:	12 16       	cp	r1, r18
 580:	13 06       	cpc	r1, r19
 582:	14 06       	cpc	r1, r20
 584:	05 06       	cpc	r0, r21
 586:	08 95       	ret

00000588 <__fp_round>:
 588:	09 2e       	mov	r0, r25
 58a:	03 94       	inc	r0
 58c:	00 0c       	add	r0, r0
 58e:	11 f4       	brne	.+4      	; 0x594 <__fp_round+0xc>
 590:	88 23       	and	r24, r24
 592:	52 f0       	brmi	.+20     	; 0x5a8 <__fp_round+0x20>
 594:	bb 0f       	add	r27, r27
 596:	40 f4       	brcc	.+16     	; 0x5a8 <__fp_round+0x20>
 598:	bf 2b       	or	r27, r31
 59a:	11 f4       	brne	.+4      	; 0x5a0 <__fp_round+0x18>
 59c:	60 ff       	sbrs	r22, 0
 59e:	04 c0       	rjmp	.+8      	; 0x5a8 <__fp_round+0x20>
 5a0:	6f 5f       	subi	r22, 0xFF	; 255
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255
 5a4:	8f 4f       	sbci	r24, 0xFF	; 255
 5a6:	9f 4f       	sbci	r25, 0xFF	; 255
 5a8:	08 95       	ret

000005aa <__umulhisi3>:
 5aa:	a2 9f       	mul	r26, r18
 5ac:	b0 01       	movw	r22, r0
 5ae:	b3 9f       	mul	r27, r19
 5b0:	c0 01       	movw	r24, r0
 5b2:	a3 9f       	mul	r26, r19
 5b4:	70 0d       	add	r23, r0
 5b6:	81 1d       	adc	r24, r1
 5b8:	11 24       	eor	r1, r1
 5ba:	91 1d       	adc	r25, r1
 5bc:	b2 9f       	mul	r27, r18
 5be:	70 0d       	add	r23, r0
 5c0:	81 1d       	adc	r24, r1
 5c2:	11 24       	eor	r1, r1
 5c4:	91 1d       	adc	r25, r1
 5c6:	08 95       	ret

000005c8 <_exit>:
 5c8:	f8 94       	cli

000005ca <__stop_program>:
 5ca:	ff cf       	rjmp	.-2      	; 0x5ca <__stop_program>
