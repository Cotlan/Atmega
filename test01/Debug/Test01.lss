
Test01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000546  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc1  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000861  00000000  00000000  000011b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ae  00000000  00000000  00001a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042f  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000362  00000000  00000000  0000235b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000026bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	36 d0       	rcall	.+108    	; 0x106 <main>
  9a:	29 c2       	rjmp	.+1106   	; 0x4ee <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <Check0>:
		ms--;
	}
}
int Check0()
{
	char v= PING & 0x01;
  9e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>

	if(v==0)
  a2:	80 fd       	sbrc	r24, 0
  a4:	03 c0       	rjmp	.+6      	; 0xac <Check0+0xe>
		return 1;// Pushed !! 
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret
	else
		return 0;
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
}
  b0:	08 95       	ret

000000b2 <Check1>:

int Check1()
{
	char v= PING & 0x02;
  b2:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
  b6:	22 70       	andi	r18, 0x02	; 2
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  b8:	84 ef       	ldi	r24, 0xF4	; 244
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <Check1+0x16>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	e0 e9       	ldi	r30, 0x90	; 144
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <Check1+0x10>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	c9 f7       	brne	.-14     	; 0xbe <Check1+0xc>
	_delay_ms(50);
	if(v==0)
  cc:	21 11       	cpse	r18, r1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <Check1+0x24>
	return 1;// Pushed !!
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret
	else
	return 0;
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
}
  da:	08 95       	ret

000000dc <Check2>:

int Check2()
{
	char v= PING & 0x04;
  dc:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
  e0:	24 70       	andi	r18, 0x04	; 4
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  e2:	84 ef       	ldi	r24, 0xF4	; 244
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <Check2+0x16>
  e8:	e0 e9       	ldi	r30, 0x90	; 144
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <Check2+0x10>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f2:	00 97       	sbiw	r24, 0x00	; 0
  f4:	c9 f7       	brne	.-14     	; 0xe8 <Check2+0xc>
	_delay_ms(50);
	if(v==0)
  f6:	21 11       	cpse	r18, r1
  f8:	03 c0       	rjmp	.+6      	; 0x100 <Check2+0x24>
	return 1;// Pushed !!
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	08 95       	ret
	else
	return 0;	
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0

}
 104:	08 95       	ret

00000106 <main>:

int main(void)
{
	DDRG |= 0x10;//4번 핀을 출력으로
 106:	e4 e6       	ldi	r30, 0x64	; 100
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 61       	ori	r24, 0x10	; 16
 10e:	80 83       	st	Z, r24
	DDRG &= ~(0x07);//0,1,2번째를 입력으로 --> DDR 레지스터를 통해 입력;/출력 설정
 110:	80 81       	ld	r24, Z
 112:	88 7f       	andi	r24, 0xF8	; 248
 114:	80 83       	st	Z, r24
	//mode = 0 : disable, mode = 1 : active 
	//char v=1;//변수를 while loop 외부에서 선언
	// 스택 메모리 사용증가X, 변수 값 유지
	while(1)
	{
		if(Check0())
 116:	c3 df       	rcall	.-122    	; 0x9e <Check0>
 118:	89 2b       	or	r24, r25
 11a:	e9 f3       	breq	.-6      	; 0x116 <main+0x10>
 11c:	cc e2       	ldi	r28, 0x2C	; 44
 11e:	d1 e0       	ldi	r29, 0x01	; 1
 120:	11 e0       	ldi	r17, 0x01	; 1
	//값을 읽어옴
	int m=300;
	while(1)
	{	
		
		if(mode0 == 1)
 122:	11 30       	cpi	r17, 0x01	; 1
 124:	09 f0       	breq	.+2      	; 0x128 <main+0x22>
 126:	7d c0       	rjmp	.+250    	; 0x222 <main+0x11c>
		{
			//bit and를 해주는 작업? 0을 넣어주면 됨
			//bit not으로 반전 시켜줌 
			
			PORTG |= 0x10;//bit mask
 128:	e5 e6       	ldi	r30, 0x65	; 101
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	80 83       	st	Z, r24
			_delay_ms(m);
 132:	be 01       	movw	r22, r28
 134:	0d 2e       	mov	r0, r29
 136:	00 0c       	add	r0, r0
 138:	88 0b       	sbc	r24, r24
 13a:	99 0b       	sbc	r25, r25
 13c:	c1 d0       	rcall	.+386    	; 0x2c0 <__floatsisf>
 13e:	4b 01       	movw	r8, r22
 140:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	4a e7       	ldi	r20, 0x7A	; 122
 148:	55 e4       	ldi	r21, 0x45	; 69
 14a:	46 d1       	rcall	.+652    	; 0x3d8 <__mulsf3>
 14c:	6b 01       	movw	r12, r22
 14e:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	40 e8       	ldi	r20, 0x80	; 128
 156:	5f e3       	ldi	r21, 0x3F	; 63
 158:	81 d0       	rcall	.+258    	; 0x25c <__cmpsf2>
 15a:	88 23       	and	r24, r24
 15c:	04 f1       	brlt	.+64     	; 0x19e <main+0x98>
		__ticks = 1;
	else if (__tmp > 65535)
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	3f ef       	ldi	r19, 0xFF	; 255
 162:	4f e7       	ldi	r20, 0x7F	; 127
 164:	57 e4       	ldi	r21, 0x47	; 71
 166:	c7 01       	movw	r24, r14
 168:	b6 01       	movw	r22, r12
 16a:	32 d1       	rcall	.+612    	; 0x3d0 <__gesf2>
 16c:	18 16       	cp	r1, r24
 16e:	9c f4       	brge	.+38     	; 0x196 <main+0x90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	40 e2       	ldi	r20, 0x20	; 32
 176:	51 e4       	ldi	r21, 0x41	; 65
 178:	c5 01       	movw	r24, r10
 17a:	b4 01       	movw	r22, r8
 17c:	2d d1       	rcall	.+602    	; 0x3d8 <__mulsf3>
 17e:	72 d0       	rcall	.+228    	; 0x264 <__fixunssfsi>
 180:	06 c0       	rjmp	.+12     	; 0x18e <main+0x88>
 182:	80 e9       	ldi	r24, 0x90	; 144
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x80>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18c:	71 09       	sbc	r23, r1
 18e:	61 15       	cp	r22, r1
 190:	71 05       	cpc	r23, r1
 192:	b9 f7       	brne	.-18     	; 0x182 <main+0x7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 194:	09 c0       	rjmp	.+18     	; 0x1a8 <main+0xa2>
 196:	c7 01       	movw	r24, r14
 198:	b6 01       	movw	r22, r12
 19a:	64 d0       	rcall	.+200    	; 0x264 <__fixunssfsi>
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <main+0x9c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	cb 01       	movw	r24, r22
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0x9e>
			PORTG &= ~(0x10);
 1a8:	e5 e6       	ldi	r30, 0x65	; 101
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	8f 7e       	andi	r24, 0xEF	; 239
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 1b0:	80 83       	st	Z, r24
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	40 e8       	ldi	r20, 0x80	; 128
 1b8:	5f e3       	ldi	r21, 0x3F	; 63
 1ba:	c7 01       	movw	r24, r14
 1bc:	b6 01       	movw	r22, r12
 1be:	4e d0       	rcall	.+156    	; 0x25c <__cmpsf2>
 1c0:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 1c2:	04 f1       	brlt	.+64     	; 0x204 <main+0xfe>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	3f ef       	ldi	r19, 0xFF	; 255
 1c8:	4f e7       	ldi	r20, 0x7F	; 127
 1ca:	57 e4       	ldi	r21, 0x47	; 71
 1cc:	c7 01       	movw	r24, r14
 1ce:	b6 01       	movw	r22, r12
 1d0:	ff d0       	rcall	.+510    	; 0x3d0 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1d2:	18 16       	cp	r1, r24
 1d4:	9c f4       	brge	.+38     	; 0x1fc <main+0xf6>
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e2       	ldi	r20, 0x20	; 32
 1dc:	51 e4       	ldi	r21, 0x41	; 65
 1de:	c5 01       	movw	r24, r10
 1e0:	b4 01       	movw	r22, r8
 1e2:	fa d0       	rcall	.+500    	; 0x3d8 <__mulsf3>
 1e4:	3f d0       	rcall	.+126    	; 0x264 <__fixunssfsi>
 1e6:	06 c0       	rjmp	.+12     	; 0x1f4 <main+0xee>
 1e8:	80 e9       	ldi	r24, 0x90	; 144
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0xe6>
 1f0:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f2:	71 09       	sbc	r23, r1
 1f4:	61 15       	cp	r22, r1
 1f6:	71 05       	cpc	r23, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1f8:	b9 f7       	brne	.-18     	; 0x1e8 <main+0xe2>
 1fa:	09 c0       	rjmp	.+18     	; 0x20e <main+0x108>
 1fc:	c7 01       	movw	r24, r14
 1fe:	b6 01       	movw	r22, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 200:	31 d0       	rcall	.+98     	; 0x264 <__fixunssfsi>
 202:	02 c0       	rjmp	.+4      	; 0x208 <main+0x102>
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	70 e0       	ldi	r23, 0x00	; 0
			_delay_ms(m);// 끄고 나서 한 번 더 지연
			//DDG3=1 //bit에 직접 접근, const-> read only ==> 0x10 = 1 의미
			if(Check1())
 208:	cb 01       	movw	r24, r22
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <main+0x104>
 20e:	51 df       	rcall	.-350    	; 0xb2 <Check1>
			{
				m-=50;
				if(m<50);
					m=50;
			}
			else if(Check2())
 210:	89 2b       	or	r24, r25
 212:	29 f4       	brne	.+10     	; 0x21e <main+0x118>
 214:	63 df       	rcall	.-314    	; 0xdc <Check2>
 216:	89 2b       	or	r24, r25
			{
				m+=50;
 218:	21 f0       	breq	.+8      	; 0x222 <main+0x11c>
 21a:	e2 96       	adiw	r28, 0x32	; 50
			//DDG3=1 //bit에 직접 접근, const-> read only ==> 0x10 = 1 의미
			if(Check1())
			{
				m-=50;
				if(m<50);
					m=50;
 21c:	02 c0       	rjmp	.+4      	; 0x222 <main+0x11c>
 21e:	c2 e3       	ldi	r28, 0x32	; 50
		}
		//동작하지 않는다....? ->
		//채터링 현상, switch는 전기적인 동작을 일으키긴 하지만 물리적인 기구
		//전기적인 파형이 붙어있다가 떨어졌다가를 반복(bounce) --> 스위치에 디캡을 달아 해결
		//v= PING & 0x08;
		if(Check0()) //pushed--> toggle mode 수정
 220:	d0 e0       	ldi	r29, 0x00	; 0
 222:	3d df       	rcall	.-390    	; 0x9e <Check0>
 224:	89 2b       	or	r24, r25
 226:	79 f0       	breq	.+30     	; 0x246 <main+0x140>
		{
			if(mode0==1)
 228:	11 30       	cpi	r17, 0x01	; 1
 22a:	11 f4       	brne	.+4      	; 0x230 <main+0x12a>
				mode0=0;
 22c:	10 e0       	ldi	r17, 0x00	; 0
 22e:	01 c0       	rjmp	.+2      	; 0x232 <main+0x12c>
			else 
				mode0=1;
 230:	11 e0       	ldi	r17, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 232:	88 e8       	ldi	r24, 0x88	; 136
 234:	93 e1       	ldi	r25, 0x13	; 19
 236:	05 c0       	rjmp	.+10     	; 0x242 <main+0x13c>
 238:	e0 e9       	ldi	r30, 0x90	; 144
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	31 97       	sbiw	r30, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <main+0x136>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 240:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	c9 f7       	brne	.-14     	; 0x238 <main+0x132>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 246:	88 ee       	ldi	r24, 0xE8	; 232
 248:	93 e0       	ldi	r25, 0x03	; 3
 24a:	05 c0       	rjmp	.+10     	; 0x256 <main+0x150>
 24c:	e0 e9       	ldi	r30, 0x90	; 144
 24e:	f1 e0       	ldi	r31, 0x01	; 1
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x14a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	c9 f7       	brne	.-14     	; 0x24c <main+0x146>
 25a:	63 cf       	rjmp	.-314    	; 0x122 <main+0x1c>

0000025c <__cmpsf2>:
 25c:	6c d0       	rcall	.+216    	; 0x336 <__fp_cmp>
 25e:	08 f4       	brcc	.+2      	; 0x262 <__cmpsf2+0x6>
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	08 95       	ret

00000264 <__fixunssfsi>:
 264:	94 d0       	rcall	.+296    	; 0x38e <__fp_splitA>
 266:	88 f0       	brcs	.+34     	; 0x28a <__fixunssfsi+0x26>
 268:	9f 57       	subi	r25, 0x7F	; 127
 26a:	90 f0       	brcs	.+36     	; 0x290 <__fixunssfsi+0x2c>
 26c:	b9 2f       	mov	r27, r25
 26e:	99 27       	eor	r25, r25
 270:	b7 51       	subi	r27, 0x17	; 23
 272:	a0 f0       	brcs	.+40     	; 0x29c <__fixunssfsi+0x38>
 274:	d1 f0       	breq	.+52     	; 0x2aa <__fixunssfsi+0x46>
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	88 1f       	adc	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	1a f0       	brmi	.+6      	; 0x286 <__fixunssfsi+0x22>
 280:	ba 95       	dec	r27
 282:	c9 f7       	brne	.-14     	; 0x276 <__fixunssfsi+0x12>
 284:	12 c0       	rjmp	.+36     	; 0x2aa <__fixunssfsi+0x46>
 286:	b1 30       	cpi	r27, 0x01	; 1
 288:	81 f0       	breq	.+32     	; 0x2aa <__fixunssfsi+0x46>
 28a:	9b d0       	rcall	.+310    	; 0x3c2 <__fp_zero>
 28c:	b1 e0       	ldi	r27, 0x01	; 1
 28e:	08 95       	ret
 290:	98 c0       	rjmp	.+304    	; 0x3c2 <__fp_zero>
 292:	67 2f       	mov	r22, r23
 294:	78 2f       	mov	r23, r24
 296:	88 27       	eor	r24, r24
 298:	b8 5f       	subi	r27, 0xF8	; 248
 29a:	39 f0       	breq	.+14     	; 0x2aa <__fixunssfsi+0x46>
 29c:	b9 3f       	cpi	r27, 0xF9	; 249
 29e:	cc f3       	brlt	.-14     	; 0x292 <__fixunssfsi+0x2e>
 2a0:	86 95       	lsr	r24
 2a2:	77 95       	ror	r23
 2a4:	67 95       	ror	r22
 2a6:	b3 95       	inc	r27
 2a8:	d9 f7       	brne	.-10     	; 0x2a0 <__fixunssfsi+0x3c>
 2aa:	3e f4       	brtc	.+14     	; 0x2ba <__fixunssfsi+0x56>
 2ac:	90 95       	com	r25
 2ae:	80 95       	com	r24
 2b0:	70 95       	com	r23
 2b2:	61 95       	neg	r22
 2b4:	7f 4f       	sbci	r23, 0xFF	; 255
 2b6:	8f 4f       	sbci	r24, 0xFF	; 255
 2b8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ba:	08 95       	ret

000002bc <__floatunsisf>:
 2bc:	e8 94       	clt
 2be:	09 c0       	rjmp	.+18     	; 0x2d2 <__floatsisf+0x12>

000002c0 <__floatsisf>:
 2c0:	97 fb       	bst	r25, 7
 2c2:	3e f4       	brtc	.+14     	; 0x2d2 <__floatsisf+0x12>
 2c4:	90 95       	com	r25
 2c6:	80 95       	com	r24
 2c8:	70 95       	com	r23
 2ca:	61 95       	neg	r22
 2cc:	7f 4f       	sbci	r23, 0xFF	; 255
 2ce:	8f 4f       	sbci	r24, 0xFF	; 255
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	99 23       	and	r25, r25
 2d4:	a9 f0       	breq	.+42     	; 0x300 <__floatsisf+0x40>
 2d6:	f9 2f       	mov	r31, r25
 2d8:	96 e9       	ldi	r25, 0x96	; 150
 2da:	bb 27       	eor	r27, r27
 2dc:	93 95       	inc	r25
 2de:	f6 95       	lsr	r31
 2e0:	87 95       	ror	r24
 2e2:	77 95       	ror	r23
 2e4:	67 95       	ror	r22
 2e6:	b7 95       	ror	r27
 2e8:	f1 11       	cpse	r31, r1
 2ea:	f8 cf       	rjmp	.-16     	; 0x2dc <__floatsisf+0x1c>
 2ec:	fa f4       	brpl	.+62     	; 0x32c <__floatsisf+0x6c>
 2ee:	bb 0f       	add	r27, r27
 2f0:	11 f4       	brne	.+4      	; 0x2f6 <__floatsisf+0x36>
 2f2:	60 ff       	sbrs	r22, 0
 2f4:	1b c0       	rjmp	.+54     	; 0x32c <__floatsisf+0x6c>
 2f6:	6f 5f       	subi	r22, 0xFF	; 255
 2f8:	7f 4f       	sbci	r23, 0xFF	; 255
 2fa:	8f 4f       	sbci	r24, 0xFF	; 255
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	16 c0       	rjmp	.+44     	; 0x32c <__floatsisf+0x6c>
 300:	88 23       	and	r24, r24
 302:	11 f0       	breq	.+4      	; 0x308 <__floatsisf+0x48>
 304:	96 e9       	ldi	r25, 0x96	; 150
 306:	11 c0       	rjmp	.+34     	; 0x32a <__floatsisf+0x6a>
 308:	77 23       	and	r23, r23
 30a:	21 f0       	breq	.+8      	; 0x314 <__floatsisf+0x54>
 30c:	9e e8       	ldi	r25, 0x8E	; 142
 30e:	87 2f       	mov	r24, r23
 310:	76 2f       	mov	r23, r22
 312:	05 c0       	rjmp	.+10     	; 0x31e <__floatsisf+0x5e>
 314:	66 23       	and	r22, r22
 316:	71 f0       	breq	.+28     	; 0x334 <__floatsisf+0x74>
 318:	96 e8       	ldi	r25, 0x86	; 134
 31a:	86 2f       	mov	r24, r22
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	2a f0       	brmi	.+10     	; 0x32c <__floatsisf+0x6c>
 322:	9a 95       	dec	r25
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	88 1f       	adc	r24, r24
 32a:	da f7       	brpl	.-10     	; 0x322 <__floatsisf+0x62>
 32c:	88 0f       	add	r24, r24
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	97 f9       	bld	r25, 7
 334:	08 95       	ret

00000336 <__fp_cmp>:
 336:	99 0f       	add	r25, r25
 338:	00 08       	sbc	r0, r0
 33a:	55 0f       	add	r21, r21
 33c:	aa 0b       	sbc	r26, r26
 33e:	e0 e8       	ldi	r30, 0x80	; 128
 340:	fe ef       	ldi	r31, 0xFE	; 254
 342:	16 16       	cp	r1, r22
 344:	17 06       	cpc	r1, r23
 346:	e8 07       	cpc	r30, r24
 348:	f9 07       	cpc	r31, r25
 34a:	c0 f0       	brcs	.+48     	; 0x37c <__fp_cmp+0x46>
 34c:	12 16       	cp	r1, r18
 34e:	13 06       	cpc	r1, r19
 350:	e4 07       	cpc	r30, r20
 352:	f5 07       	cpc	r31, r21
 354:	98 f0       	brcs	.+38     	; 0x37c <__fp_cmp+0x46>
 356:	62 1b       	sub	r22, r18
 358:	73 0b       	sbc	r23, r19
 35a:	84 0b       	sbc	r24, r20
 35c:	95 0b       	sbc	r25, r21
 35e:	39 f4       	brne	.+14     	; 0x36e <__fp_cmp+0x38>
 360:	0a 26       	eor	r0, r26
 362:	61 f0       	breq	.+24     	; 0x37c <__fp_cmp+0x46>
 364:	23 2b       	or	r18, r19
 366:	24 2b       	or	r18, r20
 368:	25 2b       	or	r18, r21
 36a:	21 f4       	brne	.+8      	; 0x374 <__fp_cmp+0x3e>
 36c:	08 95       	ret
 36e:	0a 26       	eor	r0, r26
 370:	09 f4       	brne	.+2      	; 0x374 <__fp_cmp+0x3e>
 372:	a1 40       	sbci	r26, 0x01	; 1
 374:	a6 95       	lsr	r26
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	81 1d       	adc	r24, r1
 37a:	81 1d       	adc	r24, r1
 37c:	08 95       	ret

0000037e <__fp_split3>:
 37e:	57 fd       	sbrc	r21, 7
 380:	90 58       	subi	r25, 0x80	; 128
 382:	44 0f       	add	r20, r20
 384:	55 1f       	adc	r21, r21
 386:	59 f0       	breq	.+22     	; 0x39e <__fp_splitA+0x10>
 388:	5f 3f       	cpi	r21, 0xFF	; 255
 38a:	71 f0       	breq	.+28     	; 0x3a8 <__fp_splitA+0x1a>
 38c:	47 95       	ror	r20

0000038e <__fp_splitA>:
 38e:	88 0f       	add	r24, r24
 390:	97 fb       	bst	r25, 7
 392:	99 1f       	adc	r25, r25
 394:	61 f0       	breq	.+24     	; 0x3ae <__fp_splitA+0x20>
 396:	9f 3f       	cpi	r25, 0xFF	; 255
 398:	79 f0       	breq	.+30     	; 0x3b8 <__fp_splitA+0x2a>
 39a:	87 95       	ror	r24
 39c:	08 95       	ret
 39e:	12 16       	cp	r1, r18
 3a0:	13 06       	cpc	r1, r19
 3a2:	14 06       	cpc	r1, r20
 3a4:	55 1f       	adc	r21, r21
 3a6:	f2 cf       	rjmp	.-28     	; 0x38c <__fp_split3+0xe>
 3a8:	46 95       	lsr	r20
 3aa:	f1 df       	rcall	.-30     	; 0x38e <__fp_splitA>
 3ac:	08 c0       	rjmp	.+16     	; 0x3be <__fp_splitA+0x30>
 3ae:	16 16       	cp	r1, r22
 3b0:	17 06       	cpc	r1, r23
 3b2:	18 06       	cpc	r1, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	f1 cf       	rjmp	.-30     	; 0x39a <__fp_splitA+0xc>
 3b8:	86 95       	lsr	r24
 3ba:	71 05       	cpc	r23, r1
 3bc:	61 05       	cpc	r22, r1
 3be:	08 94       	sec
 3c0:	08 95       	ret

000003c2 <__fp_zero>:
 3c2:	e8 94       	clt

000003c4 <__fp_szero>:
 3c4:	bb 27       	eor	r27, r27
 3c6:	66 27       	eor	r22, r22
 3c8:	77 27       	eor	r23, r23
 3ca:	cb 01       	movw	r24, r22
 3cc:	97 f9       	bld	r25, 7
 3ce:	08 95       	ret

000003d0 <__gesf2>:
 3d0:	b2 df       	rcall	.-156    	; 0x336 <__fp_cmp>
 3d2:	08 f4       	brcc	.+2      	; 0x3d6 <__gesf2+0x6>
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	08 95       	ret

000003d8 <__mulsf3>:
 3d8:	0b d0       	rcall	.+22     	; 0x3f0 <__mulsf3x>
 3da:	78 c0       	rjmp	.+240    	; 0x4cc <__fp_round>
 3dc:	69 d0       	rcall	.+210    	; 0x4b0 <__fp_pscA>
 3de:	28 f0       	brcs	.+10     	; 0x3ea <__mulsf3+0x12>
 3e0:	6e d0       	rcall	.+220    	; 0x4be <__fp_pscB>
 3e2:	18 f0       	brcs	.+6      	; 0x3ea <__mulsf3+0x12>
 3e4:	95 23       	and	r25, r21
 3e6:	09 f0       	breq	.+2      	; 0x3ea <__mulsf3+0x12>
 3e8:	5a c0       	rjmp	.+180    	; 0x49e <__fp_inf>
 3ea:	5f c0       	rjmp	.+190    	; 0x4aa <__fp_nan>
 3ec:	11 24       	eor	r1, r1
 3ee:	ea cf       	rjmp	.-44     	; 0x3c4 <__fp_szero>

000003f0 <__mulsf3x>:
 3f0:	c6 df       	rcall	.-116    	; 0x37e <__fp_split3>
 3f2:	a0 f3       	brcs	.-24     	; 0x3dc <__mulsf3+0x4>

000003f4 <__mulsf3_pse>:
 3f4:	95 9f       	mul	r25, r21
 3f6:	d1 f3       	breq	.-12     	; 0x3ec <__mulsf3+0x14>
 3f8:	95 0f       	add	r25, r21
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	55 1f       	adc	r21, r21
 3fe:	62 9f       	mul	r22, r18
 400:	f0 01       	movw	r30, r0
 402:	72 9f       	mul	r23, r18
 404:	bb 27       	eor	r27, r27
 406:	f0 0d       	add	r31, r0
 408:	b1 1d       	adc	r27, r1
 40a:	63 9f       	mul	r22, r19
 40c:	aa 27       	eor	r26, r26
 40e:	f0 0d       	add	r31, r0
 410:	b1 1d       	adc	r27, r1
 412:	aa 1f       	adc	r26, r26
 414:	64 9f       	mul	r22, r20
 416:	66 27       	eor	r22, r22
 418:	b0 0d       	add	r27, r0
 41a:	a1 1d       	adc	r26, r1
 41c:	66 1f       	adc	r22, r22
 41e:	82 9f       	mul	r24, r18
 420:	22 27       	eor	r18, r18
 422:	b0 0d       	add	r27, r0
 424:	a1 1d       	adc	r26, r1
 426:	62 1f       	adc	r22, r18
 428:	73 9f       	mul	r23, r19
 42a:	b0 0d       	add	r27, r0
 42c:	a1 1d       	adc	r26, r1
 42e:	62 1f       	adc	r22, r18
 430:	83 9f       	mul	r24, r19
 432:	a0 0d       	add	r26, r0
 434:	61 1d       	adc	r22, r1
 436:	22 1f       	adc	r18, r18
 438:	74 9f       	mul	r23, r20
 43a:	33 27       	eor	r19, r19
 43c:	a0 0d       	add	r26, r0
 43e:	61 1d       	adc	r22, r1
 440:	23 1f       	adc	r18, r19
 442:	84 9f       	mul	r24, r20
 444:	60 0d       	add	r22, r0
 446:	21 1d       	adc	r18, r1
 448:	82 2f       	mov	r24, r18
 44a:	76 2f       	mov	r23, r22
 44c:	6a 2f       	mov	r22, r26
 44e:	11 24       	eor	r1, r1
 450:	9f 57       	subi	r25, 0x7F	; 127
 452:	50 40       	sbci	r21, 0x00	; 0
 454:	8a f0       	brmi	.+34     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 456:	e1 f0       	breq	.+56     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 458:	88 23       	and	r24, r24
 45a:	4a f0       	brmi	.+18     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 45c:	ee 0f       	add	r30, r30
 45e:	ff 1f       	adc	r31, r31
 460:	bb 1f       	adc	r27, r27
 462:	66 1f       	adc	r22, r22
 464:	77 1f       	adc	r23, r23
 466:	88 1f       	adc	r24, r24
 468:	91 50       	subi	r25, 0x01	; 1
 46a:	50 40       	sbci	r21, 0x00	; 0
 46c:	a9 f7       	brne	.-22     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 46e:	9e 3f       	cpi	r25, 0xFE	; 254
 470:	51 05       	cpc	r21, r1
 472:	70 f0       	brcs	.+28     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 474:	14 c0       	rjmp	.+40     	; 0x49e <__fp_inf>
 476:	a6 cf       	rjmp	.-180    	; 0x3c4 <__fp_szero>
 478:	5f 3f       	cpi	r21, 0xFF	; 255
 47a:	ec f3       	brlt	.-6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 47c:	98 3e       	cpi	r25, 0xE8	; 232
 47e:	dc f3       	brlt	.-10     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 480:	86 95       	lsr	r24
 482:	77 95       	ror	r23
 484:	67 95       	ror	r22
 486:	b7 95       	ror	r27
 488:	f7 95       	ror	r31
 48a:	e7 95       	ror	r30
 48c:	9f 5f       	subi	r25, 0xFF	; 255
 48e:	c1 f7       	brne	.-16     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 490:	fe 2b       	or	r31, r30
 492:	88 0f       	add	r24, r24
 494:	91 1d       	adc	r25, r1
 496:	96 95       	lsr	r25
 498:	87 95       	ror	r24
 49a:	97 f9       	bld	r25, 7
 49c:	08 95       	ret

0000049e <__fp_inf>:
 49e:	97 f9       	bld	r25, 7
 4a0:	9f 67       	ori	r25, 0x7F	; 127
 4a2:	80 e8       	ldi	r24, 0x80	; 128
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	08 95       	ret

000004aa <__fp_nan>:
 4aa:	9f ef       	ldi	r25, 0xFF	; 255
 4ac:	80 ec       	ldi	r24, 0xC0	; 192
 4ae:	08 95       	ret

000004b0 <__fp_pscA>:
 4b0:	00 24       	eor	r0, r0
 4b2:	0a 94       	dec	r0
 4b4:	16 16       	cp	r1, r22
 4b6:	17 06       	cpc	r1, r23
 4b8:	18 06       	cpc	r1, r24
 4ba:	09 06       	cpc	r0, r25
 4bc:	08 95       	ret

000004be <__fp_pscB>:
 4be:	00 24       	eor	r0, r0
 4c0:	0a 94       	dec	r0
 4c2:	12 16       	cp	r1, r18
 4c4:	13 06       	cpc	r1, r19
 4c6:	14 06       	cpc	r1, r20
 4c8:	05 06       	cpc	r0, r21
 4ca:	08 95       	ret

000004cc <__fp_round>:
 4cc:	09 2e       	mov	r0, r25
 4ce:	03 94       	inc	r0
 4d0:	00 0c       	add	r0, r0
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <__fp_round+0xc>
 4d4:	88 23       	and	r24, r24
 4d6:	52 f0       	brmi	.+20     	; 0x4ec <__fp_round+0x20>
 4d8:	bb 0f       	add	r27, r27
 4da:	40 f4       	brcc	.+16     	; 0x4ec <__fp_round+0x20>
 4dc:	bf 2b       	or	r27, r31
 4de:	11 f4       	brne	.+4      	; 0x4e4 <__fp_round+0x18>
 4e0:	60 ff       	sbrs	r22, 0
 4e2:	04 c0       	rjmp	.+8      	; 0x4ec <__fp_round+0x20>
 4e4:	6f 5f       	subi	r22, 0xFF	; 255
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ea:	9f 4f       	sbci	r25, 0xFF	; 255
 4ec:	08 95       	ret

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
